# Enhanced Docker Compose with Full Observability Stack
# This file replaces the existing docker-compose.yml

version: "3.9"

services:
  # Database Service
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: shopiet_db
      POSTGRES_USER: shopiet_user
      POSTGRES_PASSWORD: shopiet_password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopiet_user -d shopiet_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopiet-network

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shopiet-network

  # PostgreSQL Exporter for Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://shopiet_user:shopiet_password@db:5432/shopiet_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shopiet-network

  # Redis Exporter for Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - shopiet-network

  # Container Metrics with cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - shopiet-network

  # ADOT Collector Service
  adot-collector:
    image: public.ecr.aws/aws-observability/aws-otel-collector:latest
    command: ["--config", "/etc/otel-agent-config.yaml"]
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - OTEL_SERVICE_NAME=shopiet-adot-collector
      - OTEL_SERVICE_VERSION=1.0.0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PROMETHEUS_REMOTE_WRITE_ENDPOINT=${PROMETHEUS_REMOTE_WRITE_ENDPOINT}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_EXPORTER_OTLP_HEADERS=${OTEL_EXPORTER_OTLP_HEADERS}
    volumes:
      - ./adot-collector-config.yaml:/etc/otel-agent-config.yaml:ro
      - /tmp/otelcol-filestore:/tmp/otelcol-filestore
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zpages
      - "8888:8888"   # Internal metrics
    depends_on:
      - db
      - redis
    networks:
      - shopiet-network

  # Django Backend Service
  backend:
    build:
      context: ./Backend(Docked)
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./Backend(Docked):/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - backend_logs:/app/logs
    environment:
      # Existing environment variables
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-True}
      - POSTGRES_DB=shopiet_db
      - POSTGRES_USER=shopiet_user
      - POSTGRES_PASSWORD=shopiet_password
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      
      # OpenTelemetry Configuration
      - ENABLE_OPENTELEMETRY=True
      - OTEL_SERVICE_NAME=shopiet-backend
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_SERVICE_NAMESPACE=shopiet
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://adot-collector:4318
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://adot-collector:4318/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://adot-collector:4318/v1/metrics
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://adot-collector:4318/v1/logs
      - OTEL_RESOURCE_ATTRIBUTES=service.name=shopiet-backend,service.version=1.0.0,deployment.environment=${ENVIRONMENT:-development}
      
      # Observability Configuration
      - TRACE_SAMPLING_RATE=1.0
      - ENABLE_QUERY_TRACING=True
      - ENABLE_REDIS_TRACING=True
      - ENABLE_HTTP_TRACING=True
      - PROMETHEUS_METRICS_EXPORT_PORT=8001
      - CUSTOM_METRICS_ENABLED=True
      - METRICS_NAMESPACE=shopiet
      
      # AWS Configuration (if using AWS services)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - CLOUDWATCH_LOG_GROUP=/aws/shopiet/backend
      - XRAY_TRACING_NAME=Shopiet-Backend
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      adot-collector:
        condition: service_started
    ports:
      - "8000:8000"   # Django app
      - "8001:8001"   # Prometheus metrics
    networks:
      - shopiet-network

  # React Frontend Service
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    volumes:
      - ./Frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_APP_VERSION=1.0.0
      - VITE_ENVIRONMENT=${ENVIRONMENT:-development}
      - VITE_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4318/v1/traces
      - VITE_ENABLE_OBSERVABILITY=true
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - adot-collector
    networks:
      - shopiet-network

  # Prometheus (for local metrics storage and querying)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - shopiet-network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    networks:
      - shopiet-network

  # Jaeger (for distributed tracing visualization)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "14250:14250"   # gRPC
      - "14268:14268"   # HTTP
      - "16686:16686"   # UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - shopiet-network

  # ElasticSearch (for log aggregation)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - shopiet-network

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - shopiet-network

  # Logstash (for log processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./observability/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./observability/logstash/config:/usr/share/logstash/config:ro
      - backend_logs:/app/logs:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - shopiet-network

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./observability/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./observability/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - grafana
    networks:
      - shopiet-network

networks:
  shopiet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local